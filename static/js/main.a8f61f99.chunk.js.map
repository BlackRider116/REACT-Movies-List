{"version":3,"sources":["components/Header/Header.tsx","api/api.ts","redux/reducers/filmReducer.ts","components/PaginationTag/PaginationTag.tsx","components/MoviesList/MoviesList.tsx","components/Movies/Movies.tsx","redux/reducers/bookmarksReducer.ts","components/Bookmarks/Bookmarks.tsx","App.tsx","serviceWorker.ts","redux/reduxStore.ts","index.tsx","styles/styles.module.scss"],"names":["Header","className","classes","item","activeClassName","active","to","filmsAPI","data","tags","arrFilterMoviesBody","initialState","films","tagNames","activeTagsName","isMaxTagsError","isNextFilmsButton","inputTextValue","hitList","isHitList","onInputBodyAC","type","payload","inFavorites","activeTagNamesAC","nextButtonBoolean","arrLength","itemName","getLocalItem","JSON","parse","localStorage","getItem","arrFilter","map","localItem","title","isBookmarks","filmReducer","state","action","PaginationTag","tagFilmsThunk","portionSize","useState","portionNumber","setPortionNumber","leftPortionTagNumber","rightPortionTagNumber","tagStyle","tagStyleButton","onClick","filter","id","tagActive","tagStyleActive","key","name","length","maxTagsError","MoviesList","filmNames","onFavorites","onNextFilmsButton","style","margin","width","backgroundColor","styles","content","contentMovies","OverlayTrigger","placement","overlay","Tooltip","selected","selectedOk","Button","variant","Movies","onInputText","ev","body","target","value","props","filterToMoviesThunk","this","getFilmsThunk","placeholder","onChange","fontSize","setBookmarksThunk","nextFilmsButtonThunk","React","Component","connect","filmPage","dispatch","getState","a","response","stateTags","dataTagItem","slice","filmName","stateFilms","arr","newFilmState","itemValue","push","p","setItem","stringify","boolean","moviesFilterByName","moviesFilterByTag","movies","activeTagNames","tagActiveName","includes","inputBody","toLowerCase","stateActiveTags","stateInputTextValue","moviesByTag","filterFilmsName","stateTagNames","activeItem","moviesByName","filterFilmsByTag","itemFilm","bookmarks","isFavoritesButton","favoritesLength","bookmarksReducer","Bookmarks","getBookmarksThunk","paddingLeft","deleteAllFavoritesThunk","deleteBookmarksThunk","nextFavoritesFilmsThunk","bookmarksPage","newState","window","confirm","removeItem","withRouter","exact","path","render","Boolean","location","hostname","match","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a8f61f99.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from \"../../styles/styles.module.scss\";\r\n\r\nconst Header: React.FC = () => {\r\n  return (\r\n    <nav>\r\n      <div className={classes.item}>\r\n        <NavLink activeClassName={classes.active} to=\"/films\">\r\n          Фильмы\r\n        </NavLink>\r\n        <NavLink activeClassName={classes.active} to=\"/bookmarks\">\r\n          Закладки\r\n        </NavLink>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import data from './taksnetJSON/films.json'\r\nimport tags from \"./taksnetJSON/tags.json\";\r\n\r\nexport const filmsAPI = {\r\n    getMovies() {\r\n        return data\r\n    },\r\n    getTags() {\r\n        return tags\r\n    }\r\n}","import { StateType } from '../reduxStore';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { filmsAPI } from '../../api/api';\r\n\r\nconst GET_FILMS = '/films/GET_FILM'\r\nconst TEXT_BODY = '/films/TEXT_BODY'\r\nconst ACTIVE_TAG_NAME = '/film/ACTIVE_TAG_NAME'\r\nconst GET_NEXT_FILMS = '/films/GET_NEXT_FILMS'\r\nconst IS_BOOKMARKS = '/films/IS_BOOKMARKS'\r\n\r\nconst lengthOfMovieList: number = 15\r\nlet arrFilterMoviesBody = [] as Array<FilmsType>\r\n\r\n\r\nexport type FilmsType = {\r\n    title: string\r\n    tags: Array<string>\r\n    isBookmarks?: boolean \r\n}\r\nexport type TagNamesType = {\r\n    name: string\r\n    tagActive: boolean\r\n    id: number\r\n}\r\nconst initialState = {\r\n    films: [] as Array<FilmsType>,\r\n    tagNames: [] as Array<TagNamesType>,\r\n    activeTagsName: [] as Array<string>,\r\n    isMaxTagsError: false as boolean,\r\n    isNextFilmsButton: false as boolean,\r\n    inputTextValue: '' as string,\r\n    hitList: 0 as number,\r\n    isHitList: false as boolean\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nconst filmReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type) {\r\n        case GET_FILMS:\r\n        case TEXT_BODY:\r\n        case ACTIVE_TAG_NAME:\r\n        case IS_BOOKMARKS:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        case GET_NEXT_FILMS:\r\n            return {\r\n                ...state,\r\n                films: [\r\n                    ...state.films,\r\n                    ...action.films\r\n                ],\r\n                isNextFilmsButton: action.isNextFilmsButton\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsTypes = GetFilmsActionType | OnInputBodyActionType | ActiveTagNamesActionType | NextFilmButtonActionType | IsBookmarksStateActionType\r\ntype ThunkType = ThunkAction<Promise<void>, StateType, unknown, ActionsTypes>\r\n\r\n\r\ntype GetFilmsActionType = { type: typeof GET_FILMS, payload: { films: Array<FilmsType>, tagNames: Array<TagNamesType>, isNextFilmsButton: boolean } }\r\nconst getFilmsAC = (films: Array<FilmsType>, tagNames: Array<TagNamesType>, isNextFilmsButton: boolean): GetFilmsActionType =>\r\n    ({ type: GET_FILMS, payload: { films: inFavorites(films), tagNames, isNextFilmsButton } })\r\n// первичный запрос данных\r\nexport const getFilmsThunk = (): ThunkType => async (dispatch, getState) => {\r\n    let response = !arrFilterMoviesBody.length ? await filmsAPI.getMovies() : arrFilterMoviesBody\r\n    const stateTags = getState().filmPage.tagNames\r\n\r\n    let id = 0\r\n    const dataTagItem = !stateTags.length ? await filmsAPI.getTags().map((item) => {\r\n        id++\r\n        return ({ name: item, tagActive: false, id })\r\n    }) : stateTags\r\n\r\n    dispatch(getFilmsAC(response.slice(0, lengthOfMovieList) as Array<FilmsType>, dataTagItem as Array<TagNamesType>, nextButtonBoolean(response.length)))\r\n}\r\n\r\n// Action Creator при поиске по названию\r\ntype OnInputBodyActionType = { type: typeof TEXT_BODY, payload: { films: Array<FilmsType>, inputTextValue: string, isNextFilmsButton: boolean, hitList: number, isHitList: boolean } }\r\nconst onInputBodyAC = (films: Array<FilmsType>, inputTextValue: string, isNextFilmsButton: boolean, hitList: number, isHitList: boolean): OnInputBodyActionType => ({\r\n    type: TEXT_BODY,\r\n    payload: { films: inFavorites(films), inputTextValue, isNextFilmsButton, hitList, isHitList }\r\n})\r\n// Action Creator при поиске по тегу\r\ntype ActiveTagNamesActionType = { type: typeof ACTIVE_TAG_NAME, payload: { films: Array<FilmsType>, tagNames: Array<TagNamesType>, activeTagsName: Array<string>, isMaxTagsError: boolean, isNextFilmsButton: boolean, hitList: number, isHitList: boolean } }\r\nconst activeTagNamesAC = (films: Array<FilmsType>, tagNames: Array<TagNamesType>, activeTagsName: Array<string>,\r\n    isMaxTagsError: boolean, isNextFilmsButton: boolean, hitList: number, isHitList: boolean): ActiveTagNamesActionType => ({\r\n        type: ACTIVE_TAG_NAME,\r\n        payload: { films: inFavorites(films), tagNames, activeTagsName, isMaxTagsError, isNextFilmsButton, hitList, isHitList }\r\n    })\r\n\r\n// поиск фильмов по тегу и названию\r\nexport const filterToMoviesThunk = (body: string, boolean: boolean): ThunkType => async (dispatch, getState) => {\r\n    const response = await filmsAPI.getMovies()\r\n    const stateActiveTags = getState().filmPage.activeTagsName\r\n    const stateInputTextValue = getState().filmPage.inputTextValue\r\n\r\n    if (boolean === true) {// поиск по названию\r\n        const moviesByTag = moviesFilterByTag(response, stateActiveTags)\r\n        const filterFilmsName = moviesFilterByName(moviesByTag, body)\r\n\r\n        dispatch(onInputBodyAC(filterFilmsName.slice(0, lengthOfMovieList), body,\r\n            nextButtonBoolean(filterFilmsName.length), filterFilmsName.length, isHitList(filterFilmsName)))\r\n    } else {// поиск по тегу\r\n        let stateTagNames = getState().filmPage.tagNames\r\n        let activeTagNames = [] as Array<string>\r\n\r\n        stateTagNames = stateTagNames.map(item => {\r\n            if (item.name === body) {\r\n                let activeItem = !item.tagActive && stateActiveTags.length < 3 ? true : false\r\n                if (activeItem) { activeTagNames.push(item.name) }\r\n                return { ...item, tagActive: activeItem };\r\n            }\r\n            if (item.tagActive) { activeTagNames.push(item.name) }\r\n            return item\r\n        })\r\n\r\n        const moviesByName = moviesFilterByName(response, stateInputTextValue)\r\n        const filterFilmsByTag = moviesFilterByTag(moviesByName, activeTagNames)\r\n\r\n        const isMaxTagsError = stateActiveTags.length === 3 && activeTagNames.length === 3 ? true : false\r\n        dispatch(activeTagNamesAC(filterFilmsByTag.slice(0, lengthOfMovieList), stateTagNames, activeTagNames, isMaxTagsError,\r\n            nextButtonBoolean(filterFilmsByTag.length), filterFilmsByTag.length, isHitList(filterFilmsByTag)))\r\n    }\r\n// поиск фильмов по названию\r\n    function moviesFilterByName(movies: Array<FilmsType>, inputBody: string = '') {\r\n        return movies.filter(item => {\r\n            return item.title.toLowerCase().includes(inputBody)\r\n        })\r\n    }\r\n// поиск фильмов по тегу\r\n    function moviesFilterByTag(movies: Array<FilmsType>, activeTagNames: Array<string>) {\r\n        let films = movies\r\n        for (let tagActiveName of activeTagNames) {\r\n            films = films.filter(item => {\r\n                return item.tags.includes(tagActiveName)\r\n            })\r\n        }\r\n        return films\r\n    }\r\n// вкл/выкл тег \"Найдено совпадений\" при поиске фильмов\r\n    function isHitList(arr: Array<FilmsType>) {\r\n        if (arr.length === response.length) {\r\n            arrFilterMoviesBody = []\r\n            return false\r\n        } else {\r\n            arrFilterMoviesBody = arr\r\n            return true\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\ntype NextFilmButtonActionType = { type: typeof GET_NEXT_FILMS, films: Array<FilmsType>, isNextFilmsButton: boolean }\r\nconst nextFilmButtonAC = (films: Array<FilmsType>, isNextFilmsButton: boolean): NextFilmButtonActionType => ({ type: GET_NEXT_FILMS, films: inFavorites(films), isNextFilmsButton })\r\n// кнопка \"Показать еще\", показывает следющие фильмы\r\nexport const nextFilmsButtonThunk = (): ThunkType => async (dispatch, getState) => {\r\n    let state = getState().filmPage.films as Array<FilmsType>\r\n    let filmNames = !arrFilterMoviesBody.length ? await filmsAPI.getMovies() : arrFilterMoviesBody\r\n\r\n    state.map(itemFilm => {\r\n        filmNames = filmNames.filter(item => item.title !== itemFilm.title)\r\n    })\r\n\r\n    dispatch(nextFilmButtonAC(filmNames.slice(0, lengthOfMovieList) as Array<FilmsType>, nextButtonBoolean(filmNames.length)))\r\n}\r\n\r\n\r\ntype IsBookmarksStateActionType = { type: typeof IS_BOOKMARKS, payload: { films: Array<FilmsType> } }\r\nconst isBookmarksStateAC = (films: Array<FilmsType>): IsBookmarksStateActionType => ({ type: IS_BOOKMARKS, payload: { films } })\r\n// добавить или удалить фильм из избранного\r\nexport const setBookmarksThunk = (filmName: FilmsType): ThunkType => async (dispatch, getState) => {\r\n    const getLocalItem = JSON.parse(localStorage.getItem('Movies') || '[]') as Array<FilmsType>\r\n    const stateFilms = getState().filmPage.films\r\n    let arr = getLocalItem\r\n\r\n    const newFilmState = stateFilms.map(item => {\r\n        if (item.title === filmName.title) {\r\n            const isBookmarks = item.isBookmarks ? false : true\r\n            const itemValue = { ...item, isBookmarks }\r\n            isBookmarks === true ? arr.push(itemValue) :\r\n                arr = arr.filter(p => p.title !== item.title)\r\n            return itemValue\r\n        }\r\n        return item\r\n    })\r\n\r\n    dispatch(isBookmarksStateAC(newFilmState))\r\n    localStorage.setItem('Movies', JSON.stringify(arr))\r\n}\r\n\r\n// вкл/выкл кнопку \"показать еще\"\r\nconst nextButtonBoolean = (arrLength: number) => {\r\n    return arrLength <= lengthOfMovieList ? false : true\r\n}\r\n\r\n// проверяет если фильмы в избранном\r\nconst inFavorites = (itemName: Array<FilmsType>) => {\r\n    const getLocalItem = JSON.parse(localStorage.getItem('Movies') || '[]') as Array<FilmsType>\r\n    let arrFilter = itemName\r\n\r\n    getLocalItem.map(localItem => {\r\n        arrFilter = arrFilter.map(item => {\r\n            if (item.title === localItem.title) {\r\n                return { ...item, isBookmarks: true }\r\n            }\r\n            return item\r\n        })\r\n    })\r\n    return arrFilter\r\n}\r\n\r\nexport default filmReducer;","import React, { useState } from \"react\";\r\nimport classes from \"../../styles/styles.module.scss\";\r\nimport { TagNamesType } from \"../../redux/reducers/filmReducer\";\r\n\r\n\r\ntype PropsType = {\r\n  tagNames: Array<TagNamesType>\r\n  portionSize?: number\r\n  isMaxTagsError: boolean\r\n  tagFilmsThunk: (name: string, boolean: boolean) => void\r\n}\r\nconst PaginationTag: React.FC<PropsType> = ({tagNames, tagFilmsThunk, portionSize = 6, isMaxTagsError}) => {\r\n  \r\n  let [portionNumber, setPortionNumber] = useState(1);\r\n  let leftPortionTagNumber = (portionNumber - 1) * portionSize + 1;\r\n  let rightPortionTagNumber = portionNumber * portionSize;\r\n\r\n  return (\r\n    <div>\r\n      {leftPortionTagNumber > 1 && (\r\n        <span\r\n          className={`${classes.tagStyle} ${classes.tagStyleButton}`}\r\n          onClick={() => setPortionNumber(portionNumber - 1)}\r\n        >\r\n          НАЗАД\r\n        </span>\r\n      )}\r\n\r\n      {tagNames\r\n        .filter(\r\n          item =>\r\n            item.id >= leftPortionTagNumber && item.id <= rightPortionTagNumber\r\n        )\r\n        .map(item => {\r\n          return (\r\n            <span\r\n              className={\r\n                item.tagActive\r\n                  ? `${classes.tagStyle} ${classes.tagStyleActive}`\r\n                  : classes.tagStyle\r\n              }\r\n              key={item.id}\r\n              onClick={() => tagFilmsThunk(item.name, false)}\r\n            >\r\n              {item.name}\r\n            </span>\r\n          );\r\n        })}\r\n\r\n      {rightPortionTagNumber < tagNames.length && (\r\n        <span\r\n          className={`${classes.tagStyle} ${classes.tagStyleButton}`}\r\n          onClick={() => setPortionNumber(portionNumber + 1)}\r\n        >\r\n          ДАЛЕЕ\r\n        </span>\r\n      )}\r\n\r\n      {isMaxTagsError && (\r\n        <div className={classes.maxTagsError}>Выбрано максимум 3 тега !</div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PaginationTag;\r\n","import React from \"react\";\r\nimport styles from \"../../styles/styles.module.scss\";\r\nimport { Button, OverlayTrigger, Tooltip } from \"react-bootstrap\";\r\nimport { FilmsType } from \"../../redux/reducers/filmReducer\";\r\n\r\ntype PropsType = {\r\n  filmNames: Array<FilmsType>\r\n  isNextFilmsButton: boolean\r\n  onFavorites: (item: FilmsType) => void\r\n  onNextFilmsButton: () => void\r\n}\r\nconst MoviesList: React.FC<PropsType> = ({ filmNames, onFavorites, isNextFilmsButton, onNextFilmsButton }) => {\r\n\r\n  return (\r\n    <div style={{ margin: \"8px\" }}>\r\n      {filmNames.map(item => {\r\n        return (\r\n          <div\r\n            className=\"card mx-auto\"\r\n            style={{\r\n              width: \"480px\",\r\n              margin: \"1px\",\r\n              backgroundColor: \"rgb(235, 235, 235)\"\r\n            }}\r\n            key={item.title}\r\n          >\r\n            <h5 className={styles.content}>\r\n              <span className={styles.contentMovies}>{item.title}</span>\r\n\r\n              <OverlayTrigger placement=\"right\" overlay={\r\n                //@ts-ignore\r\n                <Tooltip>{item.isBookmarks ? \"Удалить из закладок\" : \"Добавить в избранное\"}</Tooltip>\r\n              }>\r\n                <span className={styles.selected} onClick={() => {onFavorites(item)}}>\r\n                {item.isBookmarks ? <div className={styles.selectedOk}>★</div> : <div>☆</div>}\r\n                </span>\r\n              </OverlayTrigger>\r\n\r\n            </h5>\r\n          </div>\r\n        );\r\n      })}\r\n\r\n      {isNextFilmsButton && (\r\n        <Button\r\n          style={{ width: \"480px\", margin: \"5px\" }}\r\n          variant=\"secondary\"\r\n          onClick={onNextFilmsButton}\r\n        >\r\n          Показать еще\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MoviesList;\r\n","import React, { ChangeEvent } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getFilmsThunk,\r\n  filterToMoviesThunk,\r\n  nextFilmsButtonThunk,\r\n  setBookmarksThunk,\r\n  FilmsType,\r\n  TagNamesType\r\n} from \"../../redux/reducers/filmReducer\";\r\nimport { Input } from \"antd\";\r\nimport PaginationTag from \"../PaginationTag/PaginationTag\";\r\nimport MoviesList from \"../MoviesList/MoviesList\";\r\nimport { StateType } from \"../../redux/reduxStore\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n  films: Array<FilmsType>\r\n  tagNames: Array<TagNamesType>\r\n  activeTagsName: Array<string>\r\n  isNextFilmsButton: boolean\r\n  inputTextValue: string\r\n  hitList: number\r\n  isHitList: boolean\r\n  isMaxTagsError: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n  getFilmsThunk: () => void\r\n  setBookmarksThunk: (item: FilmsType) => void\r\n  filterToMoviesThunk: (body: string, boolean: boolean) => void\r\n  nextFilmsButtonThunk: () => void\r\n}\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\nclass Movies extends React.Component<PropsType> {\r\n  componentDidMount() {\r\n    this.props.getFilmsThunk();\r\n  }\r\n\r\n  onInputText = (ev: ChangeEvent<HTMLInputElement>) => {\r\n    const body = ev.target.value;\r\n    this.props.filterToMoviesThunk(body, true);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Input\r\n          style={{ width: \"480px\", margin: \"5px\" }}\r\n          placeholder=\" Поиск фильма по названию\"\r\n          value={this.props.inputTextValue}\r\n          onChange={this.onInputText}\r\n        />\r\n\r\n        <PaginationTag\r\n          tagNames={this.props.tagNames}\r\n          tagFilmsThunk={this.props.filterToMoviesThunk}\r\n          {...this.props}\r\n        />\r\n\r\n        {this.props.isHitList && (\r\n          <div\r\n            className=\"card mx-auto\"\r\n            style={{\r\n              width: \"480px\",\r\n              margin: \"3px\",\r\n              backgroundColor: \"rgb(235, 235, 235)\",\r\n              fontSize: \"17px\"\r\n            }}\r\n          >\r\n            Найдено совпадений: {this.props.hitList}\r\n          </div>\r\n        )}\r\n\r\n        <MoviesList\r\n          filmNames={this.props.films}\r\n          onFavorites={this.props.setBookmarksThunk}\r\n          isNextFilmsButton={this.props.isNextFilmsButton}\r\n          onNextFilmsButton={this.props.nextFilmsButtonThunk}\r\n        />\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType  => {\r\n  return {\r\n    films: state.filmPage.films,\r\n    isNextFilmsButton: state.filmPage.isNextFilmsButton,\r\n    inputTextValue: state.filmPage.inputTextValue,\r\n    tagNames: state.filmPage.tagNames,\r\n    activeTagsName: state.filmPage.activeTagsName,\r\n    hitList: state.filmPage.hitList,\r\n    isHitList: state.filmPage.isHitList,\r\n    isMaxTagsError: state.filmPage.isMaxTagsError\r\n  };\r\n};\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, StateType>(mapStateToProps, {\r\n  getFilmsThunk,\r\n  setBookmarksThunk,\r\n  filterToMoviesThunk,\r\n  nextFilmsButtonThunk\r\n})(Movies);\r\n","import { ThunkAction } from \"redux-thunk\"\r\nimport { StateType } from \"../reduxStore\"\r\n\r\nconst GET_BOOKMARKS = '/bookmarks/GET_BOOKMARKS'\r\nconst DELETE_BOOKMARKS = '/bookmarks/DELETE_BOOKMARKS'\r\nconst NEXT_FAVORITES_FILMS = '/bookmarks/NEXT_FAVORITES_FILMS'\r\nconst DELETE_ALL_FAVORITES = '/bookmarks/DELETE_ALL_FAVORITES'\r\n\r\nconst lengthOfMovieList = 15\r\n\r\nexport type BookmarksType = {\r\n    title: string\r\n    tags: Array<string>\r\n    isBookmarks?: boolean\r\n}\r\nconst initialState = {\r\n    bookmarks: [] as Array<BookmarksType>,\r\n    isFavoritesButton: false as boolean,\r\n    favoritesLength: 0 as number\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nconst bookmarksReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case GET_BOOKMARKS:\r\n        case DELETE_BOOKMARKS:\r\n        case DELETE_ALL_FAVORITES:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        case NEXT_FAVORITES_FILMS:\r\n            return {\r\n                ...state,\r\n                bookmarks: [\r\n                    ...state.bookmarks,\r\n                    ...action.bookmarks\r\n                ],\r\n                isFavoritesButton: action.isFavoritesButton\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsTypes = GetBookmarksActionType | DeleteBookmarksActionType | NextFavoritesFilmsActionType | DeleteAllFavoritesActionType\r\ntype ThunkType = ThunkAction<void, StateType, unknown, ActionsTypes>\r\n\r\ntype GetBookmarksActionType = { type: typeof GET_BOOKMARKS, payload: { bookmarks: Array<BookmarksType>, isFavoritesButton: boolean, favoritesLength: number } }\r\nconst getBookmarksAC = (bookmarks: Array<BookmarksType>, isFavoritesButton: boolean, favoritesLength: number): GetBookmarksActionType => ({\r\n    type: GET_BOOKMARKS,\r\n    payload: { bookmarks, isFavoritesButton, favoritesLength }\r\n})\r\n// первичный запрос данных\r\nexport const getBookmarksThunk = (): ThunkType => (dispatch) => {\r\n    const getLocalItem = JSON.parse(localStorage.getItem('Movies') || '[]') as Array<BookmarksType>\r\n    dispatch(getBookmarksAC(getLocalItem.slice(0, lengthOfMovieList), nextButtonBoolean(getLocalItem.length), getLocalItem.length))\r\n}\r\n\r\n\r\ntype DeleteBookmarksActionType = { type: typeof DELETE_BOOKMARKS, payload: { bookmarks: Array<BookmarksType>, isFavoritesButton: boolean, favoritesLength: number } }\r\nconst deleteBookmarks = (bookmarks: Array<BookmarksType>, isFavoritesButton: boolean, favoritesLength: number): DeleteBookmarksActionType => ({\r\n    type: DELETE_BOOKMARKS,\r\n    payload: { bookmarks, isFavoritesButton, favoritesLength }\r\n})\r\n// удаляет фильм из избранного\r\nexport const deleteBookmarksThunk = (filmName: BookmarksType): ThunkType => (dispatch) => {\r\n    const getLocalItem = JSON.parse(localStorage.getItem('Movies') || '[]') as Array<BookmarksType>\r\n    const newState = getLocalItem.filter(item => item.title !== filmName.title)\r\n    localStorage.setItem('Movies', JSON.stringify(newState))\r\n    dispatch(deleteBookmarks(newState.slice(0, lengthOfMovieList), nextButtonBoolean(newState.length), newState.length))\r\n}\r\n\r\n\r\n\r\ntype NextFavoritesFilmsActionType = { type: typeof NEXT_FAVORITES_FILMS, bookmarks: Array<BookmarksType>, isFavoritesButton: boolean }\r\nconst nextFavoritesFilmsAC = (bookmarks: Array<BookmarksType>, isFavoritesButton: boolean): NextFavoritesFilmsActionType =>\r\n    ({ type: NEXT_FAVORITES_FILMS, bookmarks, isFavoritesButton })\r\n// кнопка \"Показать еще\", показывает следющие фильмы\r\nexport const nextFavoritesFilmsThunk = (): ThunkType => (dispatch, getState) => {\r\n    let getLocalItem = JSON.parse(localStorage.getItem('Movies') || '[]') as Array<BookmarksType>\r\n    const state = getState().bookmarksPage.bookmarks\r\n\r\n    for (let itemFilm of state) {\r\n        getLocalItem = getLocalItem.filter(item => item.title !== itemFilm.title)\r\n    }\r\n\r\n    dispatch(nextFavoritesFilmsAC(getLocalItem.slice(0, lengthOfMovieList), nextButtonBoolean(getLocalItem.length)))\r\n}\r\n\r\n// вкл/выкл кнопку \"показать еще\"\r\nconst nextButtonBoolean = (arrLength: number) => {\r\n    return arrLength <= lengthOfMovieList ? false : true\r\n}\r\n\r\n\r\ntype DeleteAllFavoritesActionType = { type: typeof DELETE_ALL_FAVORITES, payload: { bookmarks: Array<BookmarksType>, isFavoritesButton: boolean, favoritesLength: number } }\r\nconst deleteAllFavoritesAC = (bookmarks: Array<BookmarksType>, isFavoritesButton: boolean, favoritesLength: number): DeleteAllFavoritesActionType => ({\r\n    type: DELETE_ALL_FAVORITES,\r\n    payload: { bookmarks, isFavoritesButton, favoritesLength }\r\n})\r\n// кнопка \"Очистить список\"\r\nexport const deleteAllFavoritesThunk = (): ThunkType => (dispatch) => {\r\n    const removeLocalStorage = window.confirm('Вы уверены, что хотите очистить список?')\r\n    if (removeLocalStorage) {\r\n        localStorage.removeItem('Movies');\r\n        dispatch(deleteAllFavoritesAC([], false, 0))\r\n    }\r\n}\r\n\r\nexport default bookmarksReducer;","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getBookmarksThunk,\r\n  deleteBookmarksThunk,\r\n  nextFavoritesFilmsThunk,\r\n  deleteAllFavoritesThunk,\r\n  BookmarksType\r\n} from \"../../redux/reducers/bookmarksReducer\";\r\nimport MoviesList from \"../MoviesList/MoviesList\";\r\nimport { StateType } from \"../../redux/reduxStore\";\r\nimport { FilmsType } from \"../../redux/reducers/filmReducer\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n  bookmarks: Array<BookmarksType>\r\n  isFavoritesButton: boolean\r\n  favoritesLength: number\r\n}\r\ntype MapDispatchToPropsType = {\r\n  getBookmarksThunk: () => void\r\n  nextFavoritesFilmsThunk: () => void\r\n  deleteBookmarksThunk: (item: FilmsType) => void\r\n  deleteAllFavoritesThunk: () => void\r\n}\r\ntype PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nclass Bookmarks extends React.Component<PropsType> {\r\n  componentDidMount() {\r\n    this.props.getBookmarksThunk();\r\n  }\r\n\r\n  render() {\r\n    const style = {\r\n      width: \"480px\",\r\n      margin: \"5px\",\r\n      fontSize: \"18px\",\r\n      paddingLeft: this.props.favoritesLength !== 0 ? \"100px\" : \"0px\",\r\n      backgroundColor: \"rgb(235, 235, 235)\"\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"card mx-auto\" style={style}>\r\n          {this.props.favoritesLength !== 0 ? (\r\n            <div>\r\n              Фильмов в избранном: {this.props.favoritesLength}\r\n              <button\r\n                className=\"btn btn-danger btn-sm float-right\"\r\n                onClick={this.props.deleteAllFavoritesThunk}\r\n              >\r\n                Очистить список\r\n              </button>\r\n            </div>\r\n          ) : (\r\n              <div>Вы не выбрали ни одного фильма</div>\r\n            )}\r\n        </div>\r\n\r\n        <MoviesList\r\n          filmNames={this.props.bookmarks}\r\n          onFavorites={this.props.deleteBookmarksThunk}\r\n          isNextFilmsButton={this.props.isFavoritesButton}\r\n          onNextFilmsButton={this.props.nextFavoritesFilmsThunk}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: StateType): MapStateToPropsType => {\r\n  return {\r\n    bookmarks: state.bookmarksPage.bookmarks,\r\n    isFavoritesButton: state.bookmarksPage.isFavoritesButton,\r\n    favoritesLength: state.bookmarksPage.favoritesLength\r\n  };\r\n};\r\n\r\n\r\nexport default connect<MapStateToPropsType, MapDispatchToPropsType, {}, StateType>((mapStateToProps), {\r\n  getBookmarksThunk,\r\n  deleteBookmarksThunk,\r\n  nextFavoritesFilmsThunk,\r\n  deleteAllFavoritesThunk\r\n})(Bookmarks);\r\n","import React from 'react';\nimport './App.scss';\nimport Header from './components/Header/Header';\nimport { Route, withRouter, Switch, Redirect } from \"react-router-dom\";\nimport Movies from './components/Movies/Movies'\nimport Bookmarks from './components/Bookmarks/Bookmarks'\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route exact path=\"/\"><Redirect to=\"/films\" /></Route>\n        <Route path='/films' render={() => <Movies />} />\n        <Route path='/bookmarks' render={() => <Bookmarks />} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport filmReducer from \"./reducers/filmReducer\";\r\nimport bookmarksReducer from \"./reducers/bookmarksReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  filmPage: filmReducer,\r\n  bookmarksPage: bookmarksReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer\r\nexport type StateType = ReturnType<RootReducerType>\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/reduxStore\";\n\nReactDOM.render(\n  <BrowserRouter basename={'https://blackrider116.github.io/TaksNet-REACT/'}>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"styles_item__BHFkE\",\"active\":\"styles_active__3gQU6\",\"tagStyle\":\"styles_tagStyle__2RCl8\",\"tagStyleActive\":\"styles_tagStyleActive__2A714\",\"tagStyleButton\":\"styles_tagStyleButton__1i3db\",\"maxTagsError\":\"styles_maxTagsError__2zouh\",\"content\":\"styles_content__25RYv\",\"contentMovies\":\"styles_contentMovies__1C2sK\",\"selected\":\"styles_selected__1YvCo\",\"selectedOk\":\"styles_selectedOk__I4ovq\"};"],"sourceRoot":""}